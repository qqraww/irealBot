import json
import re
import logging
from typing import Dict, List, Optional
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
API_KEY = "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"
MODEL_NAME = "google/gemini-flash-1.5-8b"
TELEGRAM_TOKEN = "7992173756:AAF96mu7hpiR6brqQmWRX81UoKLu6RYoIVI"
ADMIN_ID = 7341966376

client = OpenAI(api_key=API_KEY, base_url="https://openrouter.ai/api/v1")

# --- –î–ê–ù–ù–´–ï ---
products = [
  {
    "model": "iphone 15 pro max",
    "variants": [
      {"memory": "256GB", "color": "–±–µ–ª—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 92000},
      {"memory": "256GB", "color": "—Å–µ—Ä—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 104000},
      {"memory": "256GB", "color": "—Å–∏–Ω–∏–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 92000},
      {"memory": "256GB", "color": "—á–µ—Ä–Ω—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 135000},
      {"memory": "512GB", "color": "–±–µ–ª—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 116000},
      {"memory": "512GB", "color": "—Å–µ—Ä—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 134000},
      {"memory": "512GB", "color": "—Å–∏–Ω–∏–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 94000},
      {"memory": "512GB", "color": "—á–µ—Ä–Ω—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 117000},
      {"memory": "1TB", "color": "–±–µ–ª—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 141000},
      {"memory": "1TB", "color": "—Å–µ—Ä—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 181000},
      {"memory": "1TB", "color": "—Å–∏–Ω–∏–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 141000},
      {"memory": "1TB", "color": "—á–µ—Ä–Ω—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π", "price": 137000}
    ]
  },
  {
    "model": "iphone 16 pro max",
    "variants": [
      {"memory": "256GB", "color": "–±–µ–ª—ã–π", "price": 112000},
      {"memory": "256GB", "color": "–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π", "price": 112000},
      {"memory": "256GB", "color": "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "price": 127000},
      {"memory": "256GB", "color": "—á—ë—Ä–Ω—ã–π", "price": 114000},
      {"memory": "512GB", "color": "–±–µ–ª—ã–π", "price": 131000},
      {"memory": "512GB", "color": "–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π", "price": 133000},
      {"memory": "512GB", "color": "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "price": 138000},
      {"memory": "512GB", "color": "—á—ë—Ä–Ω—ã–π", "price": 134000},
      {"memory": "1TB", "color": "–±–µ–ª—ã–π", "price": 146000},
      {"memory": "1TB", "color": "–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π", "price": 139000},
      {"memory": "1TB", "color": "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "price": 152000},
      {"memory": "1TB", "color": "—á—ë—Ä–Ω—ã–π", "price": 147000}
    ]
  },
  {
    "model": "iphone 14",
    "variants": [
      {"memory": "128GB", "color": "—á—ë—Ä–Ω—ã–π (midnight)", "price": 55000},
      {"memory": "256GB", "color": "—á—ë—Ä–Ω—ã–π (midnight)", "price": 67000},
      {"memory": "128GB", "color": "–∂—ë–ª—Ç—ã–π (yellow)", "price": 55000},
      {"memory": "256GB", "color": "–±–µ–ª—ã–π (starlight)", "price": 57000}
    ]
  },
  {
    "model": "iphone 13",
    "variants": [
      {"memory": "128GB", "color": "–±–µ–ª—ã–π (starlight)", "price": 52000},
      {"memory": "128GB", "color": "—á—ë—Ä–Ω—ã–π (midnight)", "price": 49000}
    ]
  },
  {
    "model": "iphone 11",
    "variants": [
      {"memory": "64GB", "color": "—á–µ—Ä–Ω—ã–π", "price": 40000},
      {"memory": "128GB", "color": "–±–µ–ª—ã–π", "price": 45000}
    ]
  },
  {
    "model": "iphone x",
    "variants": [
      {"memory": "64GB", "color": "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "price": 38000},
      {"memory": "256GB", "color": "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π", "price": 50000}
    ]
  },
  {
    "model": "iphone 12 pro",
    "variants": [
      {"memory": "128GB", "color": "–≥—Ä–∞—Ñ–∏—Ç–æ–≤—ã–π", "price": 60000},
      {"memory": "256GB", "color": "—Å–∏–Ω–∏–π", "price": 65000}
    ]
  },
  {
    "model": "galaxy s24",
    "variants": [
      {"memory": "128GB", "color": "—á—ë—Ä–Ω—ã–π", "price": 51000}
    ]
  },
  {
    "model": "nothing phone 3a",
    "variants": [
      {"memory": "128GB", "color": "—á—ë—Ä–Ω—ã–π", "price": 37000},
      {"memory": "128GB", "color": "–±–µ–ª—ã–π", "price": 40000}
    ]
  },
  {
    "model": "nothing phone 3a pro",
    "variants": [
      {"memory": "256GB", "color": "—á—ë—Ä–Ω—ã–π", "price": 49000},
      {"memory": "256GB", "color": "–±–µ–ª—ã–π", "price": 53000}
    ]
  },
  {
    "model": "honor x7c",
    "variants": [
      {"memory": "128GB", "color": "–±–µ–ª—ã–π", "price": 23000},
      {"memory": "128GB", "color": "—á—ë—Ä–Ω—ã–π", "price": 23000},
      {"memory": "128GB", "color": "–∑–µ–ª—ë–Ω—ã–π", "price": 23000}
    ]
  }
]

# --- –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
user_contexts = {}

class UserContext:
    def __init__(self):
        self.state = "normal"  # normal, awaiting_phone
        self.wanted_model = None      # iphone 16 pro max
        self.wanted_memory = None     # 512GB  
        self.wanted_color = None      # –±–µ–ª—ã–π
        self.current_selection = None # —Ç–æ—á–Ω—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        self.order_data = {}

# --- –ü–†–û–í–ï–†–ö–ê –ù–ê –ó–ê–ü–†–û–° –ê–°–°–û–†–¢–ò–ú–ï–ù–¢–ê ---
def is_catalog_request(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥/–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"""
    catalog_words = [
        '–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–∫–∞—Ç–∞–ª–æ–≥', '—á—Ç–æ –µ—Å—Ç—å', '–∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏', '–ø–æ–∫–∞–∂–∏', '—Å–ø–∏—Å–æ–∫',
        '—Ç–æ–≤–∞—Ä—ã', '—Ç–µ–ª–µ—Ñ–æ–Ω—ã', '–Ω–∞–ª–∏—á–∏–µ', '–≤—Å–µ –º–æ–¥–µ–ª–∏'
    ]
    text_lower = text.lower()
    return any(word in text_lower for word in catalog_words)

def show_catalog() -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    catalog = "üì± <b>–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:</b>\n\n"
    
    for device in products:
        min_price = min(v['price'] for v in device['variants'])
        max_price = max(v['price'] for v in device['variants'])
        
        if min_price == max_price:
            price_text = f"{min_price:,} ‚ÇΩ"
        else:
            price_text = f"–æ—Ç {min_price:,} –¥–æ {max_price:,} ‚ÇΩ"
            
        catalog += f"‚Ä¢ <b>{device['model']}</b> ‚Äî {price_text}\n"
    
    catalog += f"\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å, –ø–∞–º—è—Ç—å –∏ —Ü–≤–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞!"
    return catalog

# --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì ---
def extract_user_wants(text: str, context: UserContext):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text_lower = text.lower()
    
    # –†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–ê–†–ò–ê–ù–¢–´ –ú–û–î–ï–õ–ï–ô
    model_patterns = {
        "iphone 16 pro max": [
            'iphone 16 pro max', '16 –ø—Ä–æ –º–∞–∫—Å', '–∞–π—Ñ–æ–Ω 16 –ø—Ä–æ –º–∞–∫—Å', 
            '16 pro max', 'iphone16promax'
        ],
        "iphone 15 pro max": [
            'iphone 15 pro max', '15 –ø—Ä–æ –º–∞–∫—Å', '–∞–π—Ñ–æ–Ω 15 –ø—Ä–æ –º–∞–∫—Å',
            '15 pro max', 'iphone15promax'
        ],
        "iphone 14": [
            'iphone 14', '14', '–∞–π—Ñ–æ–Ω 14', 'iphone14'
        ],
        "iphone 13": [
            'iphone 13', '13', '–∞–π—Ñ–æ–Ω 13', 'iphone13'
        ],
        "iphone 12 pro": [
            'iphone 12 pro', '12 –ø—Ä–æ', '–∞–π—Ñ–æ–Ω 12 –ø—Ä–æ', 'iphone 12',
            '12 pro', 'iphone12pro', '–∞–π—Ñ–æ–Ω 12'
        ],
        "iphone 11": [
            'iphone 11', '11', '–∞–π—Ñ–æ–Ω 11', 'iphone11'
        ],
        "iphone x": [
            'iphone x', '–∞–π—Ñ–æ–Ω —Ö', 'iphonex', 'iphone —Ö'
        ],
        "galaxy s24": [
            'galaxy s24', 's24', '—Å–∞–º—Å—É–Ω–≥ s24', 'samsung s24'
        ],
        "nothing phone 3a pro": [
            'nothing phone 3a pro', 'nothing 3a pro', '–Ω–æ—Å–∏–Ω–≥ –ø—Ä–æ 3–∞',
            'nothing pro 3a', 'nothing3apro', '–Ω–∏—á–∏–Ω–≥ 3–∞ –ø—Ä–æ'
        ],
        "nothing phone 3a": [
            'nothing phone 3a', 'nothing 3a', '–Ω–æ—Å–∏–Ω–≥ 3–∞',
            'nothing3a', '–Ω–∏—á–∏–Ω–≥ 3–∞'
        ],
        "honor x7c": [
            'honor x7c', '—Ö–æ–Ω–æ—Ä x7c', 'honorx7c'
        ]
    }
    
    # –ò—â–µ–º –º–æ–¥–µ–ª—å
    for model_key, patterns in model_patterns.items():
        for pattern in patterns:
            if pattern in text_lower:
                context.wanted_model = model_key
                break
        if context.wanted_model:
            break
    
    # –ü–ê–ú–Ø–¢–¨
    memory_match = re.search(r'(\d+)\s*(gb|–≥–±|tb|—Ç–±)', text_lower)
    if memory_match:
        size, unit = memory_match.groups()
        if unit.lower() in ['tb', '—Ç–±']:
            context.wanted_memory = f"{size}TB"
        else:
            context.wanted_memory = f"{size}GB"
    
    # –¶–í–ï–¢ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
    color_patterns = {
        '–±–µ–ª—ã–π': ['–±–µ–ª—ã–π', 'white', '–±–µ–ª'],
        '—á–µ—Ä–Ω—ã–π': ['—á–µ—Ä–Ω—ã–π', '—á—ë—Ä–Ω—ã–π', 'black', '—á–µ—Ä'],
        '—Å–µ—Ä—ã–π': ['—Å–µ—Ä—ã–π', '—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π', 'silver', '—Å–µ—Ä'],
        '—Å–∏–Ω–∏–π': ['—Å–∏–Ω–∏–π', 'blue', '—Å–∏–Ω'],
        '–∂–µ–ª—Ç—ã–π': ['–∂–µ–ª—Ç—ã–π', '–∂—ë–ª—Ç—ã–π', 'yellow', '–∂–µ–ª'],
        '–∑–µ–ª–µ–Ω—ã–π': ['–∑–µ–ª–µ–Ω—ã–π', '–∑–µ–ª—ë–Ω—ã–π', 'green', '–∑–µ–ª'],
        '–∑–æ–ª–æ—Ç–æ–π': ['–∑–æ–ª–æ—Ç–æ–π', '–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π', 'gold', '–∑–æ–ª']
    }
    
    for color_key, patterns in color_patterns.items():
        if any(pattern in text_lower for pattern in patterns):
            context.wanted_color = color_key
            break

def find_exact_device(context: UserContext):
    """–ò—â–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∂–µ–ª–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.wanted_model:
        return None
    
    # –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
    color_map = {
        '–±–µ–ª—ã–π': ['–±–µ–ª—ã–π', '–±–µ–ª—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π', 'starlight'],
        '—á–µ—Ä–Ω—ã–π': ['—á—ë—Ä–Ω—ã–π', '—á–µ—Ä–Ω—ã–π', '—á–µ—Ä–Ω—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π', 'midnight'],
        '—Å–µ—Ä—ã–π': ['—Å–µ—Ä—ã–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π', '—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π', '–≥—Ä–∞—Ñ–∏—Ç–æ–≤—ã–π'],
        '—Å–∏–Ω–∏–π': ['—Å–∏–Ω–∏–π', '—Å–∏–Ω–∏–π-—Ç–∏—Ç–∞–Ω–æ–≤—ã–π'],
        '–∂–µ–ª—Ç—ã–π': ['–∂—ë–ª—Ç—ã–π', 'yellow'],
        '–∑–µ–ª–µ–Ω—ã–π': ['–∑–µ–ª—ë–Ω—ã–π'],
        '–∑–æ–ª–æ—Ç–æ–π': ['–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π']
    }
    
    for device in products:
        if device['model'] == context.wanted_model:
            for variant in device['variants']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
                memory_match = not context.wanted_memory or variant['memory'] == context.wanted_memory
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–∞
                color_match = True
                if context.wanted_color:
                    variant_color = variant['color'].lower()
                    wanted_colors = color_map.get(context.wanted_color, [context.wanted_color])
                    color_match = any(color in variant_color for color in wanted_colors)
                
                if memory_match and color_match:
                    return {
                        'model': device['model'],
                        'memory': variant['memory'],
                        'color': variant['color'],
                        'price': variant['price']
                    }
    
    return None

def is_order_intent(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞—Ç—å"""
    order_words = ['—Ö–æ—á—É', '–Ω—É–∂–µ–Ω', '–±–µ—Ä—É', '–∑–∞–∫–∞–∑–∞—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∫—É–ø–∏—Ç—å']
    return any(word in text.lower() for word in order_words)

def is_confirmation(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    text_clean = text.lower().strip()
    confirm_words = ['–¥–∞', '–æ–∫', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–±–µ—Ä—É', '–æ—Ñ–æ—Ä–º–ª—è–µ–º', '–¥–∞–≤–∞–π—Ç–µ', '+', 'yes']
    return text_clean in confirm_words

def get_missing_info(context: UserContext) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    missing = []
    if not context.wanted_model:
        missing.append("–º–æ–¥–µ–ª—å")
    if not context.wanted_memory:
        missing.append("–ø–∞–º—è—Ç—å")
    if not context.wanted_color:
        missing.append("—Ü–≤–µ—Ç")
    return missing

def clear_context(context: UserContext):
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context.wanted_model = None
    context.wanted_memory = None
    context.wanted_color = None
    context.current_selection = None

# --- TELEGRAM HANDLERS ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_contexts:
        user_contexts[user_id] = UserContext()
    
    catalog = show_catalog()
    await update.message.reply_text(catalog, parse_mode='HTML')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name
    user_text = update.message.text.strip()
    
    if user_id not in user_contexts:
        user_contexts[user_id] = UserContext()
    
    user_ctx = user_contexts[user_id]
    await update.message.chat.send_action("typing")
    
    try:
        # === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –¢–ï–õ–ï–§–û–ù–ê ===
        if user_ctx.state == "awaiting_phone":
            phone_match = re.search(r'[\+]?[78]?[\s\-\(\)]?(\d[\s\-\(\)]?){10,14}', user_text)
            
            if phone_match:
                phone = re.sub(r'[\s\-\(\)]', '', phone_match.group(0))
                order = user_ctx.order_data
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
                admin_msg = (
                    f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>\n\n"
                    f"üë§ @{username}\n"
                    f"üì± <b>{order['model']}</b>\n"
                    f"üíæ {order['memory']}\n"
                    f"üé® {order['color']}\n"
                    f"üí∞ <b>{order['price']:,} ‚ÇΩ</b>\n"
                    f"üìû <code>{phone}</code>"
                )
                
                try:
                    await context.bot.send_message(ADMIN_ID, admin_msg, parse_mode='HTML')
                    await update.message.reply_text(
                        f"‚úÖ <b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\nüìû {phone}",
                        parse_mode='HTML'
                    )
                except:
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                
                # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
                user_ctx.state = "normal"
                clear_context(user_ctx)
                user_ctx.order_data = {}
                
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79998887766)")
            return
        
        # === –ü–†–û–í–ï–†–ö–ê –ù–ê –ó–ê–ü–†–û–° –ö–ê–¢–ê–õ–û–ì–ê ===
        if is_catalog_request(user_text):
            clear_context(user_ctx)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
            catalog = show_catalog()
            await update.message.reply_text(catalog, parse_mode='HTML')
            return
        
        # === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===
        if user_ctx.current_selection and is_confirmation(user_text):
            user_ctx.state = "awaiting_phone"
            user_ctx.order_data = user_ctx.current_selection
            device = user_ctx.current_selection
            
            await update.message.reply_text(
                f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑:</b>\n\n"
                f"üì± <b>{device['model']}</b>\n"
                f"üíæ {device['memory']}\n"
                f"üé® {device['color']}\n"
                f"üí∞ <b>{device['price']:,} ‚ÇΩ</b>\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû",
                parse_mode='HTML'
            )
            return
        
        # === –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ñ–ï–õ–ê–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        extract_user_wants(user_text, user_ctx)
        
        # === –ü–û–ò–°–ö –¢–û–ß–ù–û–ì–û –°–û–í–ü–ê–î–ï–ù–ò–Ø ===
        exact_device = find_exact_device(user_ctx)
        
        if exact_device:
            user_ctx.current_selection = exact_device
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å - —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–ª—è–µ–º
            if is_order_intent(user_text):
                user_ctx.state = "awaiting_phone"
                user_ctx.order_data = exact_device
                
                await update.message.reply_text(
                    f"‚úÖ <b>–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏!</b>\n\n"
                    f"üì± <b>{exact_device['model']}</b>\n"
                    f"üíæ {exact_device['memory']}\n"
                    f"üé® {exact_device['color']}\n"
                    f"üí∞ <b>{exact_device['price']:,} ‚ÇΩ</b>\n\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ üìû",
                    parse_mode='HTML'
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
                await update.message.reply_text(
                    f"üì± <b>{exact_device['model']}</b>\n"
                    f"üíæ {exact_device['memory']}\n"
                    f"üé® {exact_device['color']}\n"
                    f"üí∞ <b>{exact_device['price']:,} ‚ÇΩ</b>\n\n"
                    f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏! <b>–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑?</b>",
                    parse_mode='HTML'
                )
        else:
            # === –ï–°–õ–ò –ù–ï –ù–ê–ô–î–ï–ù–û - –£–¢–û–ß–ù–Ø–ï–ú ===
            missing = get_missing_info(user_ctx)
            
            if missing:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å
                selected_info = []
                if user_ctx.wanted_model:
                    selected_info.append(f"üì± –ú–æ–¥–µ–ª—å: <b>{user_ctx.wanted_model}</b>")
                if user_ctx.wanted_memory:
                    selected_info.append(f"üíæ –ü–∞–º—è—Ç—å: <b>{user_ctx.wanted_memory}</b>")
                if user_ctx.wanted_color:
                    selected_info.append(f"üé® –¶–≤–µ—Ç: <b>{user_ctx.wanted_color}</b>")
                
                response = ""
                if selected_info:
                    response += "–í—ã–±—Ä–∞–Ω–æ:\n" + "\n".join(selected_info) + "\n\n"
                
                if len(missing) == 1:
                    response += f"–£—Ç–æ—á–Ω–∏—Ç–µ <b>{missing[0]}</b>:"
                else:
                    response += f"–£—Ç–æ—á–Ω–∏—Ç–µ <b>{' –∏ '.join(missing)}</b>:"
                
                await update.message.reply_text(response, parse_mode='HTML')
            else:
                # –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å, –Ω–æ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
                await update.message.reply_text(
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <b>{user_ctx.wanted_model}</b> {user_ctx.wanted_memory} {user_ctx.wanted_color} –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.\n\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ <i>¬´–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç¬ª</i> —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏.",
                    parse_mode='HTML'
                )
                clear_context(user_ctx)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ <i>¬´–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç¬ª</i> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            parse_mode='HTML'
        )

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    
    print("üöÄ –ò–î–ï–ê–õ–¨–ù–´–ô –±–æ—Ç iReal –∑–∞–ø—É—â–µ–Ω!")
    print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã!")
    app.run_polling()

if __name__ == "__main__":
    main()